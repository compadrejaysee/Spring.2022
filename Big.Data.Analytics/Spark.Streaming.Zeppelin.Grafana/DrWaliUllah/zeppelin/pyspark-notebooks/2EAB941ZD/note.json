{
  "paragraphs": [
    {
      "text": "%sh\npip install kafka-python",
      "user": "anonymous",
      "dateUpdated": "2022-06-02 05:06:49.880",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sh",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/sh"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Collecting kafka-python\n  Downloading https://files.pythonhosted.org/packages/75/68/dcb0db055309f680ab2931a3eeb22d865604b638acf8c914bedf4c1a0c8c/kafka_python-2.0.2-py2.py3-none-any.whl (246kB)\nInstalling collected packages: kafka-python\nSuccessfully installed kafka-python-2.0.2\nYou are using pip version 8.1.2, however version 22.1.2 is available.\nYou should consider upgrading via the \u0027pip install --upgrade pip\u0027 command.\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1556538860554_-1121550077",
      "id": "20190429-115420_1698791579",
      "dateCreated": "2019-04-29 11:54:20.554",
      "dateStarted": "2022-06-02 05:06:50.081",
      "dateFinished": "2022-06-02 05:06:55.236",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sh\n%sh\nmkdir /zeppelin/dep\ncd /zeppelin/dep \u0026\u0026 wget https://repo1.maven.org/maven2/org/apache/spark/spark-streaming-kafka-0-8-assembly_2.11/2.0.2/spark-streaming-kafka-0-8-assembly_2.11-2.0.2.jar\ncd /zeppelin/dep \u0026\u0026 wget https://repo1.maven.org/maven2/org/apache/spark/spark-streaming-kafka-0-8_2.11/2.0.2/spark-streaming-kafka-0-8_2.11-2.0.2.jar\ncp /zeppelin/dep/spark-streaming-kafka-0-8_2.11-2.0.2.jar /zeppelin/interpreter/spark/dep\ncp /zeppelin/dep/spark-streaming-kafka-0-8-assembly_2.11-2.0.2.jar /zeppelin/interpreter/spark/dep",
      "user": "anonymous",
      "dateUpdated": "2022-06-02 05:06:53.836",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sh",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/sh"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "bash: line 0: fg: no job control\n--2022-06-02 05:06:53--  https://repo1.maven.org/maven2/org/apache/spark/spark-streaming-kafka-0-8-assembly_2.11/2.0.2/spark-streaming-kafka-0-8-assembly_2.11-2.0.2.jar\nResolving repo1.maven.org (repo1.maven.org)... 151.101.40.209\nConnecting to repo1.maven.org (repo1.maven.org)|151.101.40.209|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 11292862 (11M) [application/java-archive]\nSaving to: ‘spark-streaming-kafka-0-8-assembly_2.11-2.0.2.jar’\n\n     0K .......... .......... .......... .......... ..........  0%  156K 70s\n    50K .......... .......... .......... .......... ..........  0%  600K 44s\n   100K .......... .......... .......... .......... ..........  1%  292K 42s\n   150K .......... .......... .......... .......... ..........  1%  898K 34s\n   200K .......... .......... .......... .......... ..........  2%  304K 34s\n   250K .......... .......... .......... .......... ..........  2%  767K 31s\n   300K .......... .......... .......... .......... ..........  3%  946K 28s\n   350K .......... .......... .......... .......... ..........  3%  258K 29s\n   400K .......... .......... .......... .......... ..........  4% 1.09M 27s\n   450K .......... .......... .......... .......... ..........  4% 2.00M 25s\n   500K .......... .......... .......... .......... ..........  4% 2.34M 23s\n   550K .......... .......... .......... .......... ..........  5% 2.28M 21s\n   600K .......... .......... .......... .......... ..........  5%  444K 21s\n   650K .......... .......... .......... .......... ..........  6% 2.47M 20s\n   700K .......... .......... .......... .......... ..........  6% 2.58M 19s\n   750K .......... .......... .......... .......... ..........  7% 1.55M 18s\n   800K .......... .......... .......... .......... ..........  7% 2.54M 17s\n   850K .......... .......... .......... .......... ..........  8% 3.16M 16s\n   900K .......... .......... .......... .......... ..........  8% 3.56M 15s\n   950K .......... .......... .......... .......... ..........  9% 3.62M 15s\n  1000K .......... .......... .......... .......... ..........  9% 3.90M 14s\n  1050K .......... .......... .......... .......... ..........  9% 4.14M 13s\n  1100K .......... .......... .......... .......... .......... 10% 4.31M 13s\n  1150K .......... .......... .......... .......... .......... 10%  557K 13s\n  1200K .......... .......... .......... .......... .......... 11% 3.93M 13s\n  1250K .......... .......... .......... .......... .......... 11% 5.01M 12s\n  1300K .......... .......... .......... .......... .......... 12% 5.44M 12s\n  1350K .......... .......... .......... .......... .......... 12% 4.43M 11s\n  1400K .......... .......... .......... .......... .......... 13% 5.33M 11s\n  1450K .......... .......... .......... .......... .......... 13% 5.66M 10s\n  1500K .......... .......... .......... .......... .......... 14% 3.93M 10s\n  1550K .......... .......... .......... .......... .......... 14% 2.94M 10s\n  1600K .......... .......... .......... .......... .......... 14% 6.24M 10s\n  1650K .......... .......... .......... .......... .......... 15% 5.92M 9s\n  1700K .......... .......... .......... .......... .......... 15% 6.16M 9s\n  1750K .......... .......... .......... .......... .......... 16% 5.64M 9s\n  1800K .......... .......... .......... .......... .......... 16% 4.41M 9s\n  1850K .......... .......... .......... .......... .......... 17% 5.58M 8s\n  1900K .......... .......... .......... .......... .......... 17% 4.60M 8s\n  1950K .......... .......... .......... .......... .......... 18% 3.77M 8s\n  2000K .......... .......... .......... .......... .......... 18% 4.55M 8s\n  2050K .......... .......... .......... .......... .......... 19% 4.82M 8s\n  2100K .......... .......... .......... .......... .......... 19% 4.90M 7s\n  2150K .......... .......... .......... .......... .......... 19% 4.76M 7s\n  2200K .......... .......... .......... .......... .......... 20% 4.94M 7s\n  2250K .......... .......... .......... .......... .......... 20% 4.43M 7s\n  2300K .......... .......... .......... .......... .......... 21% 4.29M 7s\n  2350K .......... .......... .......... .......... .......... 21% 1.55M 7s\n  2400K .......... .......... .......... .......... .......... 22% 9.25M 7s\n  2450K .......... .......... .......... .......... .......... 22% 4.46M 6s\n  2500K .......... .......... .......... .......... .......... 23% 4.90M 6s\n  2550K .......... .......... .......... .......... .......... 23% 4.65M 6s\n  2600K .......... .......... .......... .......... .......... 24% 5.04M 6s\n  2650K .......... .......... .......... .......... .......... 24% 4.85M 6s\n  2700K .......... .......... .......... .......... .......... 24% 4.22M 6s\n  2750K .......... .......... .......... .......... .......... 25% 3.96M 6s\n  2800K .......... .......... .......... .......... .......... 25% 4.56M 6s\n  2850K .......... .......... .......... .......... .......... 26% 4.80M 5s\n  2900K .......... .......... .......... .......... .......... 26% 5.00M 5s\n  2950K .......... .......... .......... .......... .......... 27% 4.70M 5s\n  3000K .......... .......... .......... .......... .......... 27% 4.98M 5s\n  3050K .......... .......... .......... .......... .......... 28% 4.49M 5s\n  3100K .......... .......... .......... .......... .......... 28% 4.49M 5s\n  3150K .......... .......... .......... .......... .......... 29% 3.70M 5s\n  3200K .......... .......... .......... .......... .......... 29% 4.88M 5s\n  3250K .......... .......... .......... .......... .......... 29% 4.83M 5s\n  3300K .......... .......... .......... .......... .......... 30% 4.98M 5s\n  3350K .......... .......... .......... .......... .......... 30% 4.73M 5s\n  3400K .......... .......... .......... .......... .......... 31% 4.46M 5s\n  3450K .......... .......... .......... .......... .......... 31% 5.00M 4s\n  3500K .......... .......... .......... .......... .......... 32% 4.70M 4s\n  3550K .......... .......... .......... .......... .......... 32% 3.55M 4s\n  3600K .......... .......... .......... .......... .......... 33% 5.02M 4s\n  3650K .......... .......... .......... .......... .......... 33% 4.83M 4s\n  3700K .......... .......... .......... .......... .......... 34% 4.78M 4s\n  3750K .......... .......... .......... .......... .......... 34% 4.66M 4s\n  3800K .......... .......... .......... .......... .......... 34% 4.32M 4s\n  3850K .......... .......... .......... .......... .......... 35% 5.44M 4s\n  3900K .......... .......... .......... .......... .......... 35% 4.79M 4s\n  3950K .......... .......... .......... .......... .......... 36% 3.45M 4s\n  4000K .......... .......... .......... .......... .......... 36% 4.74M 4s\n  4050K .......... .......... .......... .......... .......... 37% 4.67M 4s\n  4100K .......... .......... .......... .......... .......... 37% 5.40M 4s\n  4150K .......... .......... .......... .......... .......... 38% 4.46M 4s\n  4200K .......... .......... .......... .......... .......... 38% 4.82M 4s\n  4250K .......... .......... .......... .......... .......... 38% 4.92M 4s\n  4300K .......... .......... .......... .......... .......... 39% 4.81M 3s\n  4350K .......... .......... .......... .......... .......... 39% 3.59M 3s\n  4400K .......... .......... .......... .......... .......... 40% 4.89M 3s\n  4450K .......... .......... .......... .......... .......... 40% 4.83M 3s\n  4500K .......... .......... .......... .......... .......... 41% 4.47M 3s\n  4550K .......... .......... .......... .......... .......... 41% 4.83M 3s\n  4600K .......... .......... .......... .......... .......... 42% 4.80M 3s\n  4650K .......... .......... .......... .......... .......... 42% 4.92M 3s\n  4700K .......... .......... .......... .......... .......... 43% 4.90M 3s\n  4750K .......... .......... .......... .......... .......... 43% 3.52M 3s\n  4800K .......... .......... .......... .......... .......... 43% 4.82M 3s\n  4850K .......... .......... .......... .......... .......... 44% 4.83M 3s\n  4900K .......... .......... .......... .......... .......... 44% 4.41M 3s\n  4950K .......... .......... .......... .......... .......... 45% 5.00M 3s\n  5000K .......... .......... .......... .......... .......... 45% 4.47M 3s\n  5050K .......... .......... .......... .......... .......... 46% 5.29M 3s\n  5100K .......... .......... .......... .......... .......... 46% 4.63M 3s\n  5150K .......... .......... .......... .......... .......... 47% 3.60M 3s\n  5200K .......... .......... .......... .......... .......... 47% 4.79M 3s\n  5250K .......... .......... .......... .......... .......... 48% 4.48M 3s\n  5300K .......... .......... .......... .......... .......... 48% 4.89M 3s\n  5350K .......... .......... .......... .......... .......... 48% 4.97M 3s\n  5400K .......... .......... .......... .......... .......... 49% 4.80M 3s\n  5450K .......... .......... .......... .......... .......... 49% 4.70M 3s\n  5500K .......... .......... .......... .......... .......... 50% 4.73M 2s\n  5550K .......... .......... .......... .......... .......... 50% 3.64M 2s\n  5600K .......... .......... .......... .......... .......... 51% 4.65M 2s\n  5650K .......... .......... .......... .......... .......... 51% 5.34M 2s\n  5700K .......... .......... .......... .......... .......... 52% 4.35M 2s\n  5750K .......... .......... .......... .......... .......... 52% 4.31M 2s\n  5800K .......... .......... .......... .......... .......... 53% 5.20M 2s\n  5850K .......... .......... .......... .......... .......... 53% 4.55M 2s\n  5900K .......... .......... .......... .......... .......... 53% 4.74M 2s\n  5950K .......... .......... .......... .......... .......... 54% 4.00M 2s\n  6000K .......... .......... .......... .......... .......... 54% 2.88M 2s\n  6050K .......... .......... .......... .......... .......... 55% 7.75M 2s\n  6100K .......... .......... .......... .......... .......... 55% 4.06M 2s\n  6150K .......... .......... .......... .......... .......... 56% 6.35M 2s\n  6200K .......... .......... .......... .......... .......... 56% 5.84M 2s\n  6250K .......... .......... .......... .......... .......... 57% 3.94M 2s\n  6300K .......... .......... .......... .......... .......... 57% 4.18M 2s\n  6350K .......... .......... .......... .......... .......... 58% 4.35M 2s\n  6400K .......... .......... .......... .......... .......... 58% 3.63M 2s\n  6450K .......... .......... .......... .......... .......... 58% 5.99M 2s\n  6500K .......... .......... .......... .......... .......... 59% 6.37M 2s\n  6550K .......... .......... .......... .......... .......... 59% 2.87M 2s\n  6600K .......... .......... .......... .......... .......... 60% 14.0M 2s\n  6650K .......... .......... .......... .......... .......... 60% 4.36M 2s\n  6700K .......... .......... .......... .......... .......... 61% 5.00M 2s\n  6750K .......... .......... .......... .......... .......... 61% 3.88M 2s\n  6800K .......... .......... .......... .......... .......... 62% 4.53M 2s\n  6850K .......... .......... .......... .......... .......... 62% 4.80M 2s\n  6900K .......... .......... .......... .......... .......... 63% 3.05M 2s\n  6950K .......... .......... .......... .......... .......... 63% 6.10M 2s\n  7000K .......... .......... .......... .......... .......... 63% 6.20M 2s\n  7050K .......... .......... .......... .......... .......... 64% 4.12M 2s\n  7100K .......... .......... .......... .......... .......... 64% 4.82M 2s\n  7150K .......... .......... .......... .......... .......... 65% 3.66M 2s\n  7200K .......... .......... .......... .......... .......... 65% 6.34M 2s\n  7250K .......... .......... .......... .......... .......... 66% 4.39M 1s\n  7300K .......... .......... .......... .......... .......... 66% 5.65M 1s\n  7350K .......... .......... .......... .......... .......... 67% 4.75M 1s\n  7400K .......... .......... .......... .......... .......... 67% 67.0K 2s\n  7450K .......... .......... .......... .......... .......... 68% 9.00M 2s\n  7500K .......... .......... .......... .......... .......... 68% 16.6M 2s\n  7550K .......... .......... .......... .......... .......... 68% 7.66M 2s\n  7600K .......... .......... .......... .......... .......... 69% 14.2M 2s\n  7650K .......... .......... .......... .......... .......... 69% 83.2M 2s\n  7700K .......... .......... .......... .......... .......... 70% 7.09M 2s\n  7750K .......... .......... .......... .......... .......... 70%  160M 2s\n  7800K .......... .......... .......... .......... .......... 71%  116M 1s\n  7850K .......... .......... .......... .......... .......... 71% 32.7M 1s\n  7900K .......... .......... .......... .......... .......... 72%  116M 1s\n  7950K .......... .......... .......... .......... .......... 72% 16.1M 1s\n  8000K .......... .......... .......... .......... .......... 72% 14.8M 1s\n  8050K .......... .......... .......... .......... .......... 73% 44.9M 1s\n  8100K .......... .......... .......... .......... .......... 73% 21.7M 1s\n  8150K .......... .......... .......... .......... .......... 74% 13.1M 1s\n  8200K .......... .......... .......... .......... .......... 74%  210M 1s\n  8250K .......... .......... .......... .......... .......... 75%  179M 1s\n  8300K .......... .......... .......... .......... .......... 75% 12.4M 1s\n  8350K .......... .......... .......... .......... .......... 76% 14.9M 1s\n  8400K .......... .......... .......... .......... .......... 76% 69.0M 1s\n  8450K .......... .......... .......... .......... .......... 77% 17.6M 1s\n  8500K .......... .......... .......... .......... .......... 77% 10.7M 1s\n  8550K .......... .......... .......... .......... .......... 77% 10.2M 1s\n  8600K .......... .......... .......... .......... .......... 78% 56.3M 1s\n  8650K .......... .......... .......... .......... .......... 78% 10.2M 1s\n  8700K .......... .......... .......... .......... .......... 79% 11.5M 1s\n  8750K .......... .......... .......... .......... .......... 79% 73.1M 1s\n  8800K .......... .......... .......... .......... .......... 80% 11.3M 1s\n  8850K .......... .......... .......... .......... .......... 80% 15.3M 1s\n  8900K .......... .......... .......... .......... .......... 81% 6.45M 1s\n  8950K .......... .......... .......... .......... .......... 81% 28.8M 1s\n  9000K .......... .......... .......... .......... .......... 82% 21.9M 1s\n  9050K .......... .......... .......... .......... .......... 82% 14.7M 1s\n  9100K .......... .......... .......... .......... .......... 82%  115M 1s\n  9150K .......... .......... .......... .......... .......... 83%  299K 1s\n  9200K .......... .......... .......... .......... .......... 83% 5.59M 1s\n  9250K .......... .......... .......... .......... .......... 84% 3.43M 1s\n  9300K .......... .......... .......... .......... .......... 84% 2.91M 1s\n  9350K .......... .......... .......... .......... .......... 85% 3.01M 1s\n  9400K .......... .......... .......... .......... .......... 85% 2.98M 1s\n  9450K .......... .......... .......... .......... .......... 86% 2.83M 1s\n  9500K .......... .......... .......... .......... .......... 86% 2.93M 1s\n  9550K .......... .......... .......... .......... .......... 87% 2.15M 1s\n  9600K .......... .......... .......... .......... .......... 87% 2.81M 1s\n  9650K .......... .......... .......... .......... .......... 87% 2.52M 1s\n  9700K .......... .......... .......... .......... .......... 88% 2.56M 1s\n  9750K .......... .......... .......... .......... .......... 88% 2.71M 1s\n  9800K .......... .......... .......... .......... .......... 89% 3.25M 0s\n  9850K .......... .......... .......... .......... .......... 89% 2.31M 0s\n  9900K .......... .......... .......... .......... .......... 90% 2.39M 0s\n  9950K .......... .......... .......... .......... .......... 90% 1.57M 0s\n 10000K .......... .......... .......... .......... .......... 91% 2.14M 0s\n 10050K .......... .......... .......... .......... .......... 91% 3.36M 0s\n 10100K .......... .......... .......... .......... .......... 92% 2.46M 0s\n 10150K .......... .......... .......... .......... .......... 92% 2.43M 0s\n 10200K .......... .......... .......... .......... .......... 92% 2.35M 0s\n 10250K .......... .......... .......... .......... .......... 93% 2.34M 0s\n 10300K .......... .......... .......... .......... .......... 93% 2.49M 0s\n 10350K .......... .......... .......... .......... .......... 94% 1.77M 0s\n 10400K .......... .......... .......... .......... .......... 94% 2.36M 0s\n 10450K .......... .......... .......... .......... .......... 95% 2.50M 0s\n 10500K .......... .......... .......... .......... .......... 95% 2.38M 0s\n 10550K .......... .......... .......... .......... .......... 96% 2.40M 0s\n 10600K .......... .......... .......... .......... .......... 96% 2.31M 0s\n 10650K .......... .......... .......... .......... .......... 97% 2.19M 0s\n 10700K .......... .......... .......... .......... .......... 97% 2.57M 0s\n 10750K .......... .......... .......... .......... .......... 97% 1.90M 0s\n 10800K .......... .......... .......... .......... .......... 98% 2.24M 0s\n 10850K .......... .......... .......... .......... .......... 98% 2.52M 0s\n 10900K .......... .......... .......... .......... .......... 99% 2.36M 0s\n 10950K .......... .......... .......... .......... .......... 99% 2.28M 0s\n 11000K .......... .......... ........                        100% 2.66M\u003d4.6s\n\n2022-06-02 05:06:59 (2.32 MB/s) - ‘spark-streaming-kafka-0-8-assembly_2.11-2.0.2.jar’ saved [11292862/11292862]\n\n--2022-06-02 05:06:59--  https://repo1.maven.org/maven2/org/apache/spark/spark-streaming-kafka-0-8_2.11/2.0.2/spark-streaming-kafka-0-8_2.11-2.0.2.jar\nResolving repo1.maven.org (repo1.maven.org)... 199.232.192.209, 199.232.196.209\nConnecting to repo1.maven.org (repo1.maven.org)|199.232.192.209|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 294131 (287K) [application/java-archive]\nSaving to: ‘spark-streaming-kafka-0-8_2.11-2.0.2.jar’\n\n     0K .......... .......... .......... .......... .......... 17%  392K 1s\n    50K .......... .......... .......... .......... .......... 34% 1.32M 0s\n   100K .......... .......... .......... .......... .......... 52%  753K 0s\n   150K .......... .......... .......... .......... .......... 69% 2.05M 0s\n   200K .......... .......... .......... .......... .......... 87%  727K 0s\n   250K .......... .......... .......... .......              100% 2.23M\u003d0.3s\n\n2022-06-02 05:07:00 (845 KB/s) - ‘spark-streaming-kafka-0-8_2.11-2.0.2.jar’ saved [294131/294131]\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1653885984031_122808641",
      "id": "20220530-044624_630074417",
      "dateCreated": "2022-05-30 04:46:24.031",
      "dateStarted": "2022-06-02 05:06:53.977",
      "dateFinished": "2022-06-02 05:07:00.802",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "\n%sh\ncd /zeppelin/dep \u0026\u0026 wget https://repo1.maven.org/maven2/org/apache/spark/spark-streaming-kafka-0-8-assembly_2.11/2.0.2/spark-streaming-kafka-0-8-assembly_2.11-2.0.2.jar",
      "user": "anonymous",
      "dateUpdated": "2022-06-02 05:06:57.852",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sh",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/sh"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "--2022-06-02 05:06:58--  https://repo1.maven.org/maven2/org/apache/spark/spark-streaming-kafka-0-8-assembly_2.11/2.0.2/spark-streaming-kafka-0-8-assembly_2.11-2.0.2.jar\nResolving repo1.maven.org (repo1.maven.org)... 199.232.192.209, 199.232.196.209\nConnecting to repo1.maven.org (repo1.maven.org)|199.232.192.209|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 11292862 (11M) [application/java-archive]\nSaving to: ‘spark-streaming-kafka-0-8-assembly_2.11-2.0.2.jar.1’\n\n     0K .......... .......... .......... .......... ..........  0%  424K 26s\n    50K .......... .......... .......... .......... ..........  0% 1.16M 18s\n   100K .......... .......... .......... .......... ..........  1%  678K 17s\n   150K .......... .......... .......... .......... ..........  1% 2.17M 14s\n   200K .......... .......... .......... .......... ..........  2%  723K 14s\n   250K .......... .......... .......... .......... ..........  2% 1.89M 13s\n   300K .......... .......... .......... .......... ..........  3% 2.20M 11s\n   350K .......... .......... .......... .......... ..........  3%  740K 12s\n   400K .......... .......... .......... .......... ..........  4% 1.75M 11s\n   450K .......... .......... .......... .......... ..........  4% 7.13M 10s\n   500K .......... .......... .......... .......... ..........  4% 2.25M 9s\n   550K .......... .......... .......... .......... ..........  5% 2.40M 9s\n   600K .......... .......... .......... .......... ..........  5% 1.71M 9s\n   650K .......... .......... .......... .......... ..........  6% 2.40M 8s\n   700K .......... .......... .......... .......... ..........  6% 2.36M 8s\n   750K .......... .......... .......... .......... ..........  7% 2.43M 8s\n   800K .......... .......... .......... .......... ..........  7% 2.29M 8s\n   850K .......... .......... .......... .......... ..........  8% 2.09M 7s\n   900K .......... .......... .......... .......... ..........  8% 2.12M 7s\n   950K .......... .......... .......... .......... ..........  9% 2.34M 7s\n  1000K .......... .......... .......... .......... ..........  9% 2.34M 7s\n  1050K .......... .......... .......... .......... ..........  9% 2.39M 7s\n  1100K .......... .......... .......... .......... .......... 10% 2.21M 7s\n  1150K .......... .......... .......... .......... .......... 10% 2.56M 6s\n  1200K .......... .......... .......... .......... .......... 11% 2.49M 6s\n  1250K .......... .......... .......... .......... .......... 11% 2.24M 6s\n  1300K .......... .......... .......... .......... .......... 12% 1.91M 6s\n  1350K .......... .......... .......... .......... .......... 12% 2.37M 6s\n  1400K .......... .......... .......... .......... .......... 13% 2.28M 6s\n  1450K .......... .......... .......... .......... .......... 13% 2.47M 6s\n  1500K .......... .......... .......... .......... .......... 14% 2.31M 6s\n  1550K .......... .......... .......... .......... .......... 14% 2.34M 6s\n  1600K .......... .......... .......... .......... .......... 14% 2.48M 6s\n  1650K .......... .......... .......... .......... .......... 15% 2.36M 5s\n  1700K .......... .......... .......... .......... .......... 15% 1.84M 5s\n  1750K .......... .......... .......... .......... .......... 16% 2.24M 5s\n  1800K .......... .......... .......... .......... .......... 16% 2.96M 5s\n  1850K .......... .......... .......... .......... .......... 17% 4.17M 5s\n  1900K .......... .......... .......... .......... .......... 17% 9.35M 5s\n  1950K .......... .......... .......... .......... .......... 18% 6.25M 5s\n  2000K .......... .......... .......... .......... .......... 18% 4.68M 5s\n  2050K .......... .......... .......... .......... .......... 19% 4.72M 5s\n  2100K .......... .......... .......... .......... .......... 19% 3.71M 5s\n  2150K .......... .......... .......... .......... .......... 19% 4.78M 5s\n  2200K .......... .......... .......... .......... .......... 20% 3.92M 4s\n  2250K .......... .......... .......... .......... .......... 20% 5.68M 4s\n  2300K .......... .......... .......... .......... .......... 21% 4.72M 4s\n  2350K .......... .......... .......... .......... .......... 21% 5.11M 4s\n  2400K .......... .......... .......... .......... .......... 22% 3.65M 4s\n  2450K .......... .......... .......... .......... .......... 22% 5.81M 4s\n  2500K .......... .......... .......... .......... .......... 23% 4.09M 4s\n  2550K .......... .......... .......... .......... .......... 23% 4.44M 4s\n  2600K .......... .......... .......... .......... .......... 24% 4.51M 4s\n  2650K .......... .......... .......... .......... .......... 24% 4.29M 4s\n  2700K .......... .......... .......... .......... .......... 24% 6.01M 4s\n  2750K .......... .......... .......... .......... .......... 25% 4.69M 4s\n  2800K .......... .......... .......... .......... .......... 25% 2.89M 4s\n  2850K .......... .......... .......... .......... .......... 26% 5.44M 4s\n  2900K .......... .......... .......... .......... .......... 26% 5.01M 4s\n  2950K .......... .......... .......... .......... .......... 27% 5.50M 3s\n  3000K .......... .......... .......... .......... .......... 27% 4.49M 3s\n  3050K .......... .......... .......... .......... .......... 28% 4.87M 3s\n  3100K .......... .......... .......... .......... .......... 28% 4.87M 3s\n  3150K .......... .......... .......... .......... .......... 29% 4.49M 3s\n  3200K .......... .......... .......... .......... .......... 29% 5.05M 3s\n  3250K .......... .......... .......... .......... .......... 29% 4.65M 3s\n  3300K .......... .......... .......... .......... .......... 30% 3.70M 3s\n  3350K .......... .......... .......... .......... .......... 30% 4.89M 3s\n  3400K .......... .......... .......... .......... .......... 31% 4.62M 3s\n  3450K .......... .......... .......... .......... .......... 31% 4.85M 3s\n  3500K .......... .......... .......... .......... .......... 32% 4.75M 3s\n  3550K .......... .......... .......... .......... .......... 32% 4.86M 3s\n  3600K .......... .......... .......... .......... .......... 33% 4.86M 3s\n  3650K .......... .......... .......... .......... .......... 33% 4.44M 3s\n  3700K .......... .......... .......... .......... .......... 34% 3.53M 3s\n  3750K .......... .......... .......... .......... .......... 34% 4.99M 3s\n  3800K .......... .......... .......... .......... .......... 34% 4.72M 3s\n  3850K .......... .......... .......... .......... .......... 35% 4.90M 3s\n  3900K .......... .......... .......... .......... .......... 35% 4.79M 3s\n  3950K .......... .......... .......... .......... .......... 36% 4.84M 3s\n  4000K .......... .......... .......... .......... .......... 36% 4.62M 3s\n  4050K .......... .......... .......... .......... .......... 37% 4.89M 3s\n  4100K .......... .......... .......... .......... .......... 37% 2.69M 3s\n  4150K .......... .......... .......... .......... .......... 38% 4.02M 3s\n  4200K .......... .......... .......... .......... .......... 38% 4.11M 3s\n  4250K .......... .......... .......... .......... .......... 38% 4.31M 2s\n  4300K .......... .......... .......... .......... .......... 39% 5.11M 2s\n  4350K .......... .......... .......... .......... .......... 39% 4.47M 2s\n  4400K .......... .......... .......... .......... .......... 40% 4.77M 2s\n  4450K .......... .......... .......... .......... .......... 40% 4.00M 2s\n  4500K .......... .......... .......... .......... .......... 41% 4.16M 2s\n  4550K .......... .......... .......... .......... .......... 41% 3.78M 2s\n  4600K .......... .......... .......... .......... .......... 42% 3.79M 2s\n  4650K .......... .......... .......... .......... .......... 42% 3.51M 2s\n  4700K .......... .......... .......... .......... .......... 43% 2.82M 2s\n  4750K .......... .......... .......... .......... .......... 43% 3.15M 2s\n  4800K .......... .......... .......... .......... .......... 43% 7.33M 2s\n  4850K .......... .......... .......... .......... .......... 44% 4.94M 2s\n  4900K .......... .......... .......... .......... .......... 44% 3.26M 2s\n  4950K .......... .......... .......... .......... .......... 45% 3.79M 2s\n  5000K .......... .......... .......... .......... .......... 45% 2.59M 2s\n  5050K .......... .......... .......... .......... .......... 46% 2.01M 2s\n  5100K .......... .......... .......... .......... .......... 46% 4.53M 2s\n  5150K .......... .......... .......... .......... .......... 47% 4.58M 2s\n  5200K .......... .......... .......... .......... .......... 47% 4.26M 2s\n  5250K .......... .......... .......... .......... .......... 48% 5.24M 2s\n  5300K .......... .......... .......... .......... .......... 48% 3.90M 2s\n  5350K .......... .......... .......... .......... .......... 48% 2.77M 2s\n  5400K .......... .......... .......... .......... .......... 49% 4.52M 2s\n  5450K .......... .......... .......... .......... .......... 49% 5.08M 2s\n  5500K .......... .......... .......... .......... .......... 50% 4.74M 2s\n  5550K .......... .......... .......... .......... .......... 50% 4.51M 2s\n  5600K .......... .......... .......... .......... .......... 51% 5.48M 2s\n  5650K .......... .......... .......... .......... .......... 51% 4.48M 2s\n  5700K .......... .......... .......... .......... .......... 52% 3.65M 2s\n  5750K .......... .......... .......... .......... .......... 52% 4.49M 2s\n  5800K .......... .......... .......... .......... .......... 53% 4.87M 2s\n  5850K .......... .......... .......... .......... .......... 53% 2.14M 2s\n  5900K .......... .......... .......... .......... .......... 53%  110M 2s\n  5950K .......... .......... .......... .......... .......... 54% 6.67M 2s\n  6000K .......... .......... .......... .......... .......... 54% 4.76M 2s\n  6050K .......... .......... .......... .......... .......... 55% 4.91M 2s\n  6100K .......... .......... .......... .......... .......... 55% 3.44M 2s\n  6150K .......... .......... .......... .......... .......... 56% 5.02M 2s\n  6200K .......... .......... .......... .......... .......... 56% 4.46M 2s\n  6250K .......... .......... .......... .......... .......... 57% 5.35M 2s\n  6300K .......... .......... .......... .......... .......... 57% 4.91M 2s\n  6350K .......... .......... .......... .......... .......... 58% 4.24M 2s\n  6400K .......... .......... .......... .......... .......... 58% 4.79M 1s\n  6450K .......... .......... .......... .......... .......... 58% 5.12M 1s\n  6500K .......... .......... .......... .......... .......... 59% 3.56M 1s\n  6550K .......... .......... .......... .......... .......... 59% 4.87M 1s\n  6600K .......... .......... .......... .......... .......... 60% 4.86M 1s\n  6650K .......... .......... .......... .......... .......... 60% 4.84M 1s\n  6700K .......... .......... .......... .......... .......... 61% 4.66M 1s\n  6750K .......... .......... .......... .......... .......... 61% 4.69M 1s\n  6800K .......... .......... .......... .......... .......... 62% 4.75M 1s\n  6850K .......... .......... .......... .......... .......... 62% 4.91M 1s\n  6900K .......... .......... .......... .......... .......... 63% 3.53M 1s\n  6950K .......... .......... .......... .......... .......... 63% 4.83M 1s\n  7000K .......... .......... .......... .......... .......... 63% 4.53M 1s\n  7050K .......... .......... .......... .......... .......... 64% 5.32M 1s\n  7100K .......... .......... .......... .......... .......... 64% 4.52M 1s\n  7150K .......... .......... .......... .......... .......... 65% 4.87M 1s\n  7200K .......... .......... .......... .......... .......... 65% 4.75M 1s\n  7250K .......... .......... .......... .......... .......... 66% 4.89M 1s\n  7300K .......... .......... .......... .......... .......... 66% 3.55M 1s\n  7350K .......... .......... .......... .......... .......... 67% 4.79M 1s\n  7400K .......... .......... .......... .......... .......... 67% 4.83M 1s\n  7450K .......... .......... .......... .......... .......... 68% 4.49M 1s\n  7500K .......... .......... .......... .......... .......... 68% 4.65M 1s\n  7550K .......... .......... .......... .......... .......... 68% 5.15M 1s\n  7600K .......... .......... .......... .......... .......... 69% 4.86M 1s\n  7650K .......... .......... .......... .......... .......... 69% 4.86M 1s\n  7700K .......... .......... .......... .......... .......... 70% 3.56M 1s\n  7750K .......... .......... .......... .......... .......... 70% 4.63M 1s\n  7800K .......... .......... .......... .......... .......... 71% 4.81M 1s\n  7850K .......... .......... .......... .......... .......... 71% 4.80M 1s\n  7900K .......... .......... .......... .......... .......... 72% 4.77M 1s\n  7950K .......... .......... .......... .......... .......... 72% 4.95M 1s\n  8000K .......... .......... .......... .......... .......... 72% 3.31M 1s\n  8050K .......... .......... .......... .......... .......... 73% 8.88M 1s\n  8100K .......... .......... .......... .......... .......... 73% 3.49M 1s\n  8150K .......... .......... .......... .......... .......... 74% 4.98M 1s\n  8200K .......... .......... .......... .......... .......... 74% 3.55M 1s\n  8250K .......... .......... .......... .......... .......... 75% 6.79M 1s\n  8300K .......... .......... .......... .......... .......... 75% 4.77M 1s\n  8350K .......... .......... .......... .......... .......... 76% 4.94M 1s\n  8400K .......... .......... .......... .......... .......... 76% 4.84M 1s\n  8450K .......... .......... .......... .......... .......... 77% 4.35M 1s\n  8500K .......... .......... .......... .......... .......... 77% 3.85M 1s\n  8550K .......... .......... .......... .......... .......... 77% 4.45M 1s\n  8600K .......... .......... .......... .......... .......... 78% 4.96M 1s\n  8650K .......... .......... .......... .......... .......... 78% 4.81M 1s\n  8700K .......... .......... .......... .......... .......... 79% 4.80M 1s\n  8750K .......... .......... .......... .......... .......... 79% 4.86M 1s\n  8800K .......... .......... .......... .......... .......... 80% 4.51M 1s\n  8850K .......... .......... .......... .......... .......... 80% 4.57M 1s\n  8900K .......... .......... .......... .......... .......... 81% 3.98M 1s\n  8950K .......... .......... .......... .......... .......... 81% 4.52M 1s\n  9000K .......... .......... .......... .......... .......... 82% 4.70M 1s\n  9050K .......... .......... .......... .......... .......... 82% 4.76M 1s\n  9100K .......... .......... .......... .......... .......... 82% 4.92M 1s\n  9150K .......... .......... .......... .......... .......... 83% 3.95M 1s\n  9200K .......... .......... .......... .......... .......... 83% 5.86M 1s\n  9250K .......... .......... .......... .......... .......... 84% 4.73M 1s\n  9300K .......... .......... .......... .......... .......... 84% 3.26M 0s\n  9350K .......... .......... .......... .......... .......... 85% 5.56M 0s\n  9400K .......... .......... .......... .......... .......... 85% 4.90M 0s\n  9450K .......... .......... .......... .......... .......... 86% 4.76M 0s\n  9500K .......... .......... .......... .......... .......... 86% 5.01M 0s\n  9550K .......... .......... .......... .......... .......... 87% 4.39M 0s\n  9600K .......... .......... .......... .......... .......... 87% 4.92M 0s\n  9650K .......... .......... .......... .......... .......... 87% 4.97M 0s\n  9700K .......... .......... .......... .......... .......... 88% 3.66M 0s\n  9750K .......... .......... .......... .......... .......... 88% 4.63M 0s\n  9800K .......... .......... .......... .......... .......... 89% 4.82M 0s\n  9850K .......... .......... .......... .......... .......... 89% 2.16M 0s\n  9900K .......... .......... .......... .......... .......... 90%  102M 0s\n  9950K .......... .......... .......... .......... .......... 90% 6.11M 0s\n 10000K .......... .......... .......... .......... .......... 91% 4.94M 0s\n 10050K .......... .......... .......... .......... .......... 91% 4.53M 0s\n 10100K .......... .......... .......... .......... .......... 92% 3.61M 0s\n 10150K .......... .......... .......... .......... .......... 92% 4.97M 0s\n 10200K .......... .......... .......... .......... .......... 92% 4.88M 0s\n 10250K .......... .......... .......... .......... .......... 93% 4.44M 0s\n 10300K .......... .......... .......... .......... .......... 93% 4.64M 0s\n 10350K .......... .......... .......... .......... .......... 94% 5.00M 0s\n 10400K .......... .......... .......... .......... .......... 94% 4.83M 0s\n 10450K .......... .......... .......... .......... .......... 95% 4.58M 0s\n 10500K .......... .......... .......... .......... .......... 95% 3.80M 0s\n 10550K .......... .......... .......... .......... .......... 96% 2.95M 0s\n 10600K .......... .......... .......... .......... .......... 96% 10.5M 0s\n 10650K .......... .......... .......... .......... .......... 97% 4.68M 0s\n 10700K .......... .......... .......... .......... .......... 97% 4.95M 0s\n 10750K .......... .......... .......... .......... .......... 97% 4.94M 0s\n 10800K .......... .......... .......... .......... .......... 98% 4.39M 0s\n 10850K .......... .......... .......... .......... .......... 98% 2.25M 0s\n 10900K .......... .......... .......... .......... .......... 99% 25.3M 0s\n 10950K .......... .......... .......... .......... .......... 99% 3.93M 0s\n 11000K .......... .......... ........                        100%  118M\u003d3.1s\n\n2022-06-02 05:07:01 (3.52 MB/s) - ‘spark-streaming-kafka-0-8-assembly_2.11-2.0.2.jar.1’ saved [11292862/11292862]\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1653549272026_1053086740",
      "id": "20220526-071432_1672781195",
      "dateCreated": "2022-05-26 07:14:32.026",
      "dateStarted": "2022-06-02 05:06:58.104",
      "dateFinished": "2022-06-02 05:07:01.962",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "",
      "text": "%producer.pyspark\n\ndf \u003d (spark.read.format(\"com.databricks.spark.csv\")\n        .option(\"header\", \"true\")\n        .option(\"inferSchema\",\"true\")\n        .load(\"/datadrive/testing4.csv\"))\n        \ndf_list \u003d df.collect()\ndf.show()",
      "user": "anonymous",
      "dateUpdated": "2022-06-02 05:07:01.796",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "editorHide": false,
        "tableHide": false,
        "title": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+---+---------+------+--------+---------+-------+-----------+---------------+--------------+--------------+-------+--------------+-------------+-----------+----------+---------+----------+---------+----+-------+\n|_c0|term_name|gender|Province|     city|seat_no|test_center|test_successful|  cert_degree1|discipline_Mat| medium|  cert_degree2|studied_maths|discipline2|math_score|eng_score|math_total|eng_total|Year|program|\n+---+---------+------+--------+---------+-------+-----------+---------------+--------------+--------------+-------+--------------+-------------+-----------+----------+---------+----------+---------+----+-------+\n|  1|Fall 2014|  Male|  Gilgit|   Others|    801|  islamabad|              0|Aga Khan Board|       Science|English|Aga Khan Board|          Yes|    Science|        52|      113|       200|      160|2014|   BSCS|\n|  2|Fall 2014|  Male|     KPK|   Others|    806|  islamabad|              1| Matriculation|       Science|English|  Intermediate|          Yes|    Science|       105|       73|       200|      160|2014|   BSEM|\n|  3|Fall 2014|  Male|  Gilgit|   Others|    807|  islamabad|              1|Aga Khan Board|       Science|English|Aga Khan Board|          Yes|    Science|       116|      128|       200|      160|2014|   BSEM|\n|  4|Fall 2014|  Male|  Gilgit|   Others|    808|  islamabad|              1|Aga Khan Board|       Science|English|Aga Khan Board|          Yes|    Science|       102|      111|       200|      160|2014|   BSCS|\n|  5|Fall 2014|  Male|     KPK|   Others|    810|  islamabad|              0| Matriculation|       Science|English|  Intermediate|          Yes|    Science|        47|       96|       200|      160|2014|   BSEM|\n|  6|Fall 2014|  Male|     AJK|   Others|    813|  islamabad|              0| Matriculation|       Science|English|  Intermediate|          Yes|    Science|        47|      106|       200|      160|2014|   BSCS|\n|  7|Fall 2014|  Male|     KPK| Peshawar|    815|  islamabad|              1|  Other boards|       Science|English|  Other boards|          Yes|    Science|       155|      155|       200|      160|2014|   BSCS|\n|  8|Fall 2014|Female|     KPK|   Others|    820|  islamabad|              0| Matriculation|       Science|English|  Intermediate|          Yes|    Science|        16|       71|       200|      160|2014|   BSCS|\n|  9|Fall 2014|  Male|  Punjab|Islamabad|    826|  islamabad|              1|       O-Level|       Science|English|       A-Level|          Yes|    Science|        92|      129|       200|      160|2014|   BSCS|\n| 10|Fall 2014|  Male|  Punjab|   Others|    903|     lahore|              0| Matriculation|       Science|English|  Intermediate|          Yes|    Science|        79|       72|       200|      160|2014|   BSCS|\n| 11|Fall 2014|Female|  Punjab|   Others|    904|     lahore|              0| Matriculation|       Science|English|  Intermediate|          Yes|    Science|        86|       86|       200|      160|2014|   BSCS|\n| 12|Fall 2014|  Male|  Punjab|   Others|    905|     lahore|              0| Matriculation|       Science|English|  Intermediate|          Yes|    Science|        56|      101|       200|      160|2014|   BSCS|\n| 13|Fall 2014|  Male|  Punjab|   Others|    906|     lahore|              1| Matriculation|       Science|English|  Intermediate|          Yes|    Science|       103|      109|       200|      160|2014|   BSCS|\n| 14|Fall 2014|  Male|  Punjab|   Others|    907|     lahore|              1| Matriculation|       Science|   Urdu|  Intermediate|          Yes|    Science|        93|      109|       200|      160|2014|   BSCS|\n| 15|Fall 2014|Female|  Punjab|   Others|    908|     lahore|              0| Matriculation|       Science|   Urdu|  Intermediate|          Yes|    Science|        77|       87|       200|      160|2014|   BSCS|\n| 16|Fall 2014|Female|  Punjab|   Others|    909|     lahore|              0| Matriculation|       Science|   Urdu|  Intermediate|          Yes|    Science|        54|       75|       200|      160|2014|   BSEM|\n| 17|Fall 2014|  Male|  Punjab|   Others|    910|     lahore|              1| Matriculation|       Science|English|  Intermediate|          Yes|    Science|       108|       98|       200|      160|2014|   BSCS|\n| 18|Fall 2014|  Male|  Punjab|   Others|    911|     lahore|              1| Matriculation|       Science|English|  Intermediate|          Yes|    Science|       108|      111|       200|      160|2014|   BSCS|\n| 19|Fall 2014|  Male|  Punjab|   Others|    912|     lahore|              1| Matriculation|       Science|English|  Intermediate|          Yes|    Science|        95|       99|       200|      160|2014|   BSCS|\n| 20|Fall 2014|  Male|     KPK|   Others|    913|     lahore|              1| Matriculation|       Science|English|  Intermediate|          Yes|    Science|       133|      109|       200|      160|2014|   BSEM|\n+---+---------+------+--------+---------+-------+-----------+---------------+--------------+--------------+-------+--------------+-------------+-----------+----------+---------+----------+---------+----+-------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1556120282490_1275576273",
      "id": "20190424-153802_2004623441",
      "dateCreated": "2019-04-24 15:38:02.490",
      "dateStarted": "2022-06-02 05:07:02.038",
      "dateFinished": "2022-06-02 05:07:28.506",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%producer.pyspark\ndf.count()",
      "user": "anonymous",
      "dateUpdated": "2022-06-02 05:07:11.828",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "38931"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1653972295743_840646152",
      "id": "20220531-044455_165165241",
      "dateCreated": "2022-05-31 04:44:55.743",
      "dateStarted": "2022-06-02 05:07:11.979",
      "dateFinished": "2022-06-02 05:07:29.770",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%producer.pyspark\nimport time\nimport json\nimport random\nimport logging\n\nfrom kafka import KafkaProducer\nfrom kafka.errors import KafkaError\n\nKAFKA_BROKER \u003d \"172.25.0.12:9092\"\nKAFKA_TOPIC \u003d \"my_topic\"\n\nproducer \u003d KafkaProducer(bootstrap_servers\u003d[KAFKA_BROKER])\nindex \u003d 0\n\nwhile True:\n    \n    row_dict \u003d df_list[index].asDict()\n    \n    future \u003d producer.send(\n        topic\u003dKAFKA_TOPIC, \n        key\u003dstr(row_dict[\"_c0\"]).encode(\"utf-8\"),\n        value\u003djson.dumps(row_dict).encode(\"utf-8\"))\n    \n    try:\n        record_metadata \u003d future.get(timeout\u003d10)\n    except KafkaError:\n        # Decide what to do if produce request failed...\n        logging.exception(\"Error\")\n        pass\n    \n    producer.flush()\n    \n    index +\u003d 1\n    time.sleep(random.uniform(0.1,3.0))",
      "user": "anonymous",
      "dateUpdated": "2022-06-02 05:07:32.235",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[0;31m\u001b[0m\n\u001b[0;31mKafkaTimeoutError\u001b[0mTraceback (most recent call last)\n\u001b[0;32m\u003cipython-input-8-cbfa1e71b1d7\u003e\u001b[0m in \u001b[0;36m\u003cmodule\u003e\u001b[0;34m()\u001b[0m\n\u001b[1;32m     20\u001b[0m         \u001b[0mtopic\u001b[0m\u001b[0;34m\u003d\u001b[0m\u001b[0mKAFKA_TOPIC\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m         \u001b[0mkey\u001b[0m\u001b[0;34m\u003d\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow_dict\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"_c0\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"utf-8\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 22\u001b[0;31m         value\u003djson.dumps(row_dict).encode(\"utf-8\"))\n\u001b[0m\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/opt/conda/lib/python2.7/site-packages/kafka/producer/kafka.pyc\u001b[0m in \u001b[0;36msend\u001b[0;34m(self, topic, value, key, headers, partition, timestamp_ms)\u001b[0m\n\u001b[1;32m    574\u001b[0m         \u001b[0mkey_bytes\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mvalue_bytes\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    575\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 576\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_wait_on_metadata\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtopic\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\u0027max_block_ms\u0027\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;36m1000.0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    577\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    578\u001b[0m             key_bytes \u003d self._serialize(\n\n\u001b[0;32m/opt/conda/lib/python2.7/site-packages/kafka/producer/kafka.pyc\u001b[0m in \u001b[0;36m_wait_on_metadata\u001b[0;34m(self, topic, max_wait)\u001b[0m\n\u001b[1;32m    701\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mmetadata_event\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_set\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    702\u001b[0m                 raise Errors.KafkaTimeoutError(\n\u001b[0;32m--\u003e 703\u001b[0;31m                     \"Failed to update metadata after %.1f secs.\" % (max_wait,))\n\u001b[0m\u001b[1;32m    704\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0mtopic\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_metadata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munauthorized_topics\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    705\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mErrors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTopicAuthorizationFailedError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtopic\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;31mKafkaTimeoutError\u001b[0m: KafkaTimeoutError: Failed to update metadata after 60.0 secs."
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1556124778874_694089528",
      "id": "20190424-165258_808657351",
      "dateCreated": "2019-04-24 16:52:58.874",
      "dateStarted": "2022-06-02 05:07:32.306",
      "dateFinished": "2022-06-02 05:08:32.826",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%consumer.pyspark\nimport json\nfrom pyspark.streaming.kafka import KafkaUtils\nfrom pyspark.streaming import StreamingContext\n\nimport os\nos.environ[\u0027PYSPARK_SUBMIT_ARGS\u0027] \u003d \u0027--packages org.apache.spark:spark-streaming-kafka-0-8_2.11:2.0.2 pyspark-shell\u0027\n\n\ntry:\n    # Reset streaming context if exists\n    ssc.stop(stopSparkContext\u003dFalse, stopGraceFully\u003dFalse)\nexcept:\n    pass\n\nssc \u003d StreamingContext(sc, batchDuration\u003d2)\n\nREDDIT_TOPIC \u003d \"my_topic\"\nKAFKA_BROKERS \u003d \"172.25.0.12:9092,172.25.0.13:9092\"\n\nstream \u003d KafkaUtils.createDirectStream(\n                            ssc, \n                            [REDDIT_TOPIC], \n                            {\"metadata.broker.list\": KAFKA_BROKERS})\n\nstream \u003d stream.map(lambda x: json.loads(x[1]))\nstream \u003d stream.map(lambda x: (x[\"_c0\"], x[\"term_name\"],x[\"gender\"],x[\"Province\"],x[\"city\"],x[\"seat_no\"],x[\"test_center\"],x[\"test_successful\"],x[\"cert_degree1\"],x[\"discipline_Mat\"],x[\"medium\"],x[\"cert_degree2\"],x[\"studied_maths\"],x[\"discipline2\"],x[\"math_score\"],\nx[\"eng_score\"],x[\"math_total\"],x[\"eng_total\"],x[\"Year\"],x[\"program\"]))\n\n\nstream.pprint()\n\nssc.start()\nssc.awaitTermination()",
      "user": "anonymous",
      "dateUpdated": "2022-06-02 05:07:34.756",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[0;31m\u001b[0m\n\u001b[0;31mPy4JJavaError\u001b[0mTraceback (most recent call last)\n\u001b[0;32m\u003cipython-input-4-3afdc9bd9cd7\u003e\u001b[0m in \u001b[0;36m\u003cmodule\u003e\u001b[0;34m()\u001b[0m\n\u001b[1;32m     21\u001b[0m                             \u001b[0mssc\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m                             \u001b[0;34m[\u001b[0m\u001b[0mREDDIT_TOPIC\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 23\u001b[0;31m                             {\"metadata.broker.list\": KAFKA_BROKERS})\n\u001b[0m\u001b[1;32m     24\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0mstream\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mstream\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mjson\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloads\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/zeppelin/interpreter/spark/pyspark/pyspark.zip/pyspark/streaming/kafka.py\u001b[0m in \u001b[0;36mcreateDirectStream\u001b[0;34m(ssc, topics, kafkaParams, fromOffsets, keyDecoder, valueDecoder, messageHandler)\u001b[0m\n\u001b[1;32m    128\u001b[0m             \u001b[0mfunc\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mfuncWithoutMessageHandler\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    129\u001b[0m             jstream \u003d helper.createDirectStreamWithoutMessageHandler(\n\u001b[0;32m--\u003e 130\u001b[0;31m                 ssc._jssc, kafkaParams, set(topics), jfromOffsets)\n\u001b[0m\u001b[1;32m    131\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    132\u001b[0m             \u001b[0mser\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mAutoBatchedSerializer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mPickleSerializer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/zeppelin/interpreter/spark/pyspark/py4j-0.10.4-src.zip/py4j/java_gateway.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m   1131\u001b[0m         \u001b[0manswer\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgateway_client\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_command\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcommand\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1132\u001b[0m         return_value \u003d get_return_value(\n\u001b[0;32m-\u003e 1133\u001b[0;31m             answer, self.gateway_client, self.target_id, self.name)\n\u001b[0m\u001b[1;32m   1134\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1135\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mtemp_arg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtemp_args\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/zeppelin/interpreter/spark/pyspark/pyspark.zip/pyspark/sql/utils.py\u001b[0m in \u001b[0;36mdeco\u001b[0;34m(*a, **kw)\u001b[0m\n\u001b[1;32m     61\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mdeco\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 63\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mpy4j\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprotocol\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPy4JJavaError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m             \u001b[0ms\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjava_exception\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtoString\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/zeppelin/interpreter/spark/pyspark/py4j-0.10.4-src.zip/py4j/protocol.py\u001b[0m in \u001b[0;36mget_return_value\u001b[0;34m(answer, gateway_client, target_id, name)\u001b[0m\n\u001b[1;32m    317\u001b[0m                 raise Py4JJavaError(\n\u001b[1;32m    318\u001b[0m                     \u001b[0;34m\"An error occurred while calling {0}{1}{2}.\\n\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 319\u001b[0;31m                     format(target_id, \".\", name), value)\n\u001b[0m\u001b[1;32m    320\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    321\u001b[0m                 raise Py4JError(\n\n\u001b[0;31mPy4JJavaError\u001b[0m: An error occurred while calling o54.createDirectStreamWithoutMessageHandler.\n: org.apache.spark.SparkException: org.apache.spark.SparkException: Error getting partition metadata for \u0027my_topic\u0027. Does the topic exist?\norg.apache.spark.SparkException: Error getting partition metadata for \u0027my_topic\u0027. Does the topic exist?\n\tat org.apache.spark.streaming.kafka.KafkaCluster$$anonfun$checkErrors$1.apply(KafkaCluster.scala:373)\n\tat org.apache.spark.streaming.kafka.KafkaCluster$$anonfun$checkErrors$1.apply(KafkaCluster.scala:373)\n\tat scala.util.Either.fold(Either.scala:98)\n\tat org.apache.spark.streaming.kafka.KafkaCluster$.checkErrors(KafkaCluster.scala:372)\n\tat org.apache.spark.streaming.kafka.KafkaUtils$.getFromOffsets(KafkaUtils.scala:222)\n\tat org.apache.spark.streaming.kafka.KafkaUtilsPythonHelper.createDirectStream(KafkaUtils.scala:720)\n\tat org.apache.spark.streaming.kafka.KafkaUtilsPythonHelper.createDirectStreamWithoutMessageHandler(KafkaUtils.scala:688)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)\n\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357)\n\tat py4j.Gateway.invoke(Gateway.java:280)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.GatewayConnection.run(GatewayConnection.java:214)\n\tat java.lang.Thread.run(Thread.java:748)\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1556022009133_-1199138898",
      "id": "20190423-122009_873241770",
      "dateCreated": "2019-04-23 12:20:09.133",
      "dateStarted": "2022-06-02 05:07:34.845",
      "dateFinished": "2022-06-02 05:08:02.592",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%consumer.pyspark\n\nimport json\nfrom pyspark.streaming.kafka import KafkaUtils\nfrom pyspark.streaming import StreamingContext\n\nimport os\nos.environ[\u0027PYSPARK_SUBMIT_ARGS\u0027] \u003d \u0027--packages org.apache.spark:spark-streaming-kafka-0-8_2.11:2.0.2 pyspark-shell\u0027\n\n\ntry:\n    # Reset streaming context if exists\n    ssc.stop(stopSparkContext\u003dFalse, stopGraceFully\u003dFalse)\nexcept:\n    pass\n\nssc \u003d StreamingContext(sc, batchDuration\u003d2)\n\nREDDIT_TOPIC \u003d \"my_topic\"\nKAFKA_BROKERS \u003d \"172.25.0.12:9092,172.25.0.13:9092\"\n\nstream \u003d KafkaUtils.createDirectStream(\n                            ssc, \n                            [REDDIT_TOPIC], \n                            {\"metadata.broker.list\": KAFKA_BROKERS})\n\nstream \u003d stream.map(lambda x: json.loads(x[1]))\nstream.count().map(lambda x:\u0027Records in this batch: %s\u0027 % x).pprint()\n\n\nssc.start()\nssc.awaitTermination()\n\n",
      "user": "anonymous",
      "dateUpdated": "2022-06-02 04:55:39.786",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[0;31m\u001b[0m\n\u001b[0;31mPy4JJavaError\u001b[0mTraceback (most recent call last)\n\u001b[0;32m\u003cipython-input-12-cf1dffa978e7\u003e\u001b[0m in \u001b[0;36m\u003cmodule\u003e\u001b[0;34m()\u001b[0m\n\u001b[1;32m     21\u001b[0m                             \u001b[0mssc\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m                             \u001b[0;34m[\u001b[0m\u001b[0mREDDIT_TOPIC\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 23\u001b[0;31m                             {\"metadata.broker.list\": KAFKA_BROKERS})\n\u001b[0m\u001b[1;32m     24\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0mstream\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mstream\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mjson\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloads\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/zeppelin/interpreter/spark/pyspark/pyspark.zip/pyspark/streaming/kafka.py\u001b[0m in \u001b[0;36mcreateDirectStream\u001b[0;34m(ssc, topics, kafkaParams, fromOffsets, keyDecoder, valueDecoder, messageHandler)\u001b[0m\n\u001b[1;32m    128\u001b[0m             \u001b[0mfunc\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mfuncWithoutMessageHandler\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    129\u001b[0m             jstream \u003d helper.createDirectStreamWithoutMessageHandler(\n\u001b[0;32m--\u003e 130\u001b[0;31m                 ssc._jssc, kafkaParams, set(topics), jfromOffsets)\n\u001b[0m\u001b[1;32m    131\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    132\u001b[0m             \u001b[0mser\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mAutoBatchedSerializer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mPickleSerializer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/zeppelin/interpreter/spark/pyspark/py4j-0.10.4-src.zip/py4j/java_gateway.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m   1131\u001b[0m         \u001b[0manswer\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgateway_client\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_command\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcommand\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1132\u001b[0m         return_value \u003d get_return_value(\n\u001b[0;32m-\u003e 1133\u001b[0;31m             answer, self.gateway_client, self.target_id, self.name)\n\u001b[0m\u001b[1;32m   1134\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1135\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mtemp_arg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtemp_args\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/zeppelin/interpreter/spark/pyspark/pyspark.zip/pyspark/sql/utils.py\u001b[0m in \u001b[0;36mdeco\u001b[0;34m(*a, **kw)\u001b[0m\n\u001b[1;32m     61\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mdeco\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 63\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mpy4j\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprotocol\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPy4JJavaError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m             \u001b[0ms\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjava_exception\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtoString\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/zeppelin/interpreter/spark/pyspark/py4j-0.10.4-src.zip/py4j/protocol.py\u001b[0m in \u001b[0;36mget_return_value\u001b[0;34m(answer, gateway_client, target_id, name)\u001b[0m\n\u001b[1;32m    317\u001b[0m                 raise Py4JJavaError(\n\u001b[1;32m    318\u001b[0m                     \u001b[0;34m\"An error occurred while calling {0}{1}{2}.\\n\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 319\u001b[0;31m                     format(target_id, \".\", name), value)\n\u001b[0m\u001b[1;32m    320\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    321\u001b[0m                 raise Py4JError(\n\n\u001b[0;31mPy4JJavaError\u001b[0m: An error occurred while calling o158.createDirectStreamWithoutMessageHandler.\n: org.apache.spark.SparkException: org.apache.spark.SparkException: Couldn\u0027t find leaders for Set([my_topic,0])\n\tat org.apache.spark.streaming.kafka.KafkaCluster$$anonfun$checkErrors$1.apply(KafkaCluster.scala:373)\n\tat org.apache.spark.streaming.kafka.KafkaCluster$$anonfun$checkErrors$1.apply(KafkaCluster.scala:373)\n\tat scala.util.Either.fold(Either.scala:98)\n\tat org.apache.spark.streaming.kafka.KafkaCluster$.checkErrors(KafkaCluster.scala:372)\n\tat org.apache.spark.streaming.kafka.KafkaUtils$.getFromOffsets(KafkaUtils.scala:222)\n\tat org.apache.spark.streaming.kafka.KafkaUtilsPythonHelper.createDirectStream(KafkaUtils.scala:720)\n\tat org.apache.spark.streaming.kafka.KafkaUtilsPythonHelper.createDirectStreamWithoutMessageHandler(KafkaUtils.scala:688)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)\n\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357)\n\tat py4j.Gateway.invoke(Gateway.java:280)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.GatewayConnection.run(GatewayConnection.java:214)\n\tat java.lang.Thread.run(Thread.java:748)\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1654083145848_233010616",
      "id": "20220601-113225_1313495594",
      "dateCreated": "2022-06-01 11:32:25.848",
      "dateStarted": "2022-06-02 04:55:39.854",
      "dateFinished": "2022-06-02 04:55:40.052",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%consumer.pyspark\n\nimport json\nfrom pyspark.streaming.kafka import KafkaUtils\nfrom pyspark.streaming import StreamingContext\n\nimport os\nos.environ[\u0027PYSPARK_SUBMIT_ARGS\u0027] \u003d \u0027--packages org.apache.spark:spark-streaming-kafka-0-8_2.11:2.0.2 pyspark-shell\u0027\n\n\ntry:\n    # Reset streaming context if exists\n    ssc.stop(stopSparkContext\u003dFalse, stopGraceFully\u003dFalse)\nexcept:\n    pass\n\nssc \u003d StreamingContext(sc, batchDuration\u003d2)\n\nREDDIT_TOPIC \u003d \"my_topic\"\nKAFKA_BROKERS \u003d \"172.25.0.12:9092,172.25.0.13:9092\"\n\nstream \u003d KafkaUtils.createDirectStream(\n                            ssc, \n                            [REDDIT_TOPIC], \n                            {\"metadata.broker.list\": KAFKA_BROKERS})\n\nstream \u003d stream.map(lambda x: json.loads(x[1]))\nlines \u003d stream.map(lambda x: (x[\"_c0\"], x[\"term_name\"]))\n\nwords \u003d lines.flatMap(lambda line: line.split(\" \"))\n\n\n# Count each word in each batch\npairs \u003d words.map(lambda word: (word, 1))\nwordCounts \u003d pairs.reduceByKey(lambda x, y: x + y)\n\n# Print the first ten elements of each RDD generated in this DStream to the console\nwordCounts.pprint()\n\nssc.start()\nssc.awaitTermination()",
      "user": "anonymous",
      "dateUpdated": "2022-06-02 04:55:45.286",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[0;31m\u001b[0m\n\u001b[0;31mPy4JJavaError\u001b[0mTraceback (most recent call last)\n\u001b[0;32m\u003cipython-input-14-4ba7db064f4d\u003e\u001b[0m in \u001b[0;36m\u003cmodule\u003e\u001b[0;34m()\u001b[0m\n\u001b[1;32m     21\u001b[0m                             \u001b[0mssc\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m                             \u001b[0;34m[\u001b[0m\u001b[0mREDDIT_TOPIC\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 23\u001b[0;31m                             {\"metadata.broker.list\": KAFKA_BROKERS})\n\u001b[0m\u001b[1;32m     24\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0mstream\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mstream\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mjson\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloads\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/zeppelin/interpreter/spark/pyspark/pyspark.zip/pyspark/streaming/kafka.py\u001b[0m in \u001b[0;36mcreateDirectStream\u001b[0;34m(ssc, topics, kafkaParams, fromOffsets, keyDecoder, valueDecoder, messageHandler)\u001b[0m\n\u001b[1;32m    128\u001b[0m             \u001b[0mfunc\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mfuncWithoutMessageHandler\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    129\u001b[0m             jstream \u003d helper.createDirectStreamWithoutMessageHandler(\n\u001b[0;32m--\u003e 130\u001b[0;31m                 ssc._jssc, kafkaParams, set(topics), jfromOffsets)\n\u001b[0m\u001b[1;32m    131\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    132\u001b[0m             \u001b[0mser\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mAutoBatchedSerializer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mPickleSerializer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/zeppelin/interpreter/spark/pyspark/py4j-0.10.4-src.zip/py4j/java_gateway.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m   1131\u001b[0m         \u001b[0manswer\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgateway_client\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_command\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcommand\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1132\u001b[0m         return_value \u003d get_return_value(\n\u001b[0;32m-\u003e 1133\u001b[0;31m             answer, self.gateway_client, self.target_id, self.name)\n\u001b[0m\u001b[1;32m   1134\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1135\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mtemp_arg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtemp_args\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/zeppelin/interpreter/spark/pyspark/pyspark.zip/pyspark/sql/utils.py\u001b[0m in \u001b[0;36mdeco\u001b[0;34m(*a, **kw)\u001b[0m\n\u001b[1;32m     61\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mdeco\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 63\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mpy4j\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprotocol\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPy4JJavaError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m             \u001b[0ms\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjava_exception\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtoString\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/zeppelin/interpreter/spark/pyspark/py4j-0.10.4-src.zip/py4j/protocol.py\u001b[0m in \u001b[0;36mget_return_value\u001b[0;34m(answer, gateway_client, target_id, name)\u001b[0m\n\u001b[1;32m    317\u001b[0m                 raise Py4JJavaError(\n\u001b[1;32m    318\u001b[0m                     \u001b[0;34m\"An error occurred while calling {0}{1}{2}.\\n\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 319\u001b[0;31m                     format(target_id, \".\", name), value)\n\u001b[0m\u001b[1;32m    320\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    321\u001b[0m                 raise Py4JError(\n\n\u001b[0;31mPy4JJavaError\u001b[0m: An error occurred while calling o184.createDirectStreamWithoutMessageHandler.\n: org.apache.spark.SparkException: org.apache.spark.SparkException: Couldn\u0027t find leaders for Set([my_topic,0])\n\tat org.apache.spark.streaming.kafka.KafkaCluster$$anonfun$checkErrors$1.apply(KafkaCluster.scala:373)\n\tat org.apache.spark.streaming.kafka.KafkaCluster$$anonfun$checkErrors$1.apply(KafkaCluster.scala:373)\n\tat scala.util.Either.fold(Either.scala:98)\n\tat org.apache.spark.streaming.kafka.KafkaCluster$.checkErrors(KafkaCluster.scala:372)\n\tat org.apache.spark.streaming.kafka.KafkaUtils$.getFromOffsets(KafkaUtils.scala:222)\n\tat org.apache.spark.streaming.kafka.KafkaUtilsPythonHelper.createDirectStream(KafkaUtils.scala:720)\n\tat org.apache.spark.streaming.kafka.KafkaUtilsPythonHelper.createDirectStreamWithoutMessageHandler(KafkaUtils.scala:688)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)\n\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357)\n\tat py4j.Gateway.invoke(Gateway.java:280)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.GatewayConnection.run(GatewayConnection.java:214)\n\tat java.lang.Thread.run(Thread.java:748)\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1654069565032_798965645",
      "id": "20220601-074605_849332239",
      "dateCreated": "2022-06-01 07:46:05.032",
      "dateStarted": "2022-06-02 04:55:45.339",
      "dateFinished": "2022-06-02 04:55:45.590",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%consumer.pyspark\n\nimport json\nfrom pyspark.streaming.kafka import KafkaUtils\nfrom pyspark.streaming import StreamingContext\n\nimport os\nos.environ[\u0027PYSPARK_SUBMIT_ARGS\u0027] \u003d \u0027--packages org.apache.spark:spark-streaming-kafka-0-8_2.11:2.0.2 pyspark-shell\u0027\n\n\ntry:\n    # Reset streaming context if exists\n    ssc.stop(stopSparkContext\u003dFalse, stopGraceFully\u003dFalse)\nexcept:\n    pass\n\nssc \u003d StreamingContext(sc, batchDuration\u003d2)\n\nREDDIT_TOPIC \u003d \"my_topic\"\nKAFKA_BROKERS \u003d \"172.25.0.12:9092,172.25.0.13:9092\"\n\nstream \u003d KafkaUtils.createDirectStream(\n                            ssc, \n                            [REDDIT_TOPIC], \n                            {\"metadata.broker.list\": KAFKA_BROKERS})\n\nstream \u003d stream.map(lambda x: json.loads(x[1]))\nstream \u003d stream.map(lambda x: (x[\"_c0\"], x[\"term_name\"]))\n\n\nstream.pprint()\n\nssc.start()\nssc.awaitTermination()",
      "user": "anonymous",
      "dateUpdated": "2022-06-02 04:55:50.626",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[0;31m\u001b[0m\n\u001b[0;31mPy4JJavaError\u001b[0mTraceback (most recent call last)\n\u001b[0;32m\u003cipython-input-16-477696f503e3\u003e\u001b[0m in \u001b[0;36m\u003cmodule\u003e\u001b[0;34m()\u001b[0m\n\u001b[1;32m     21\u001b[0m                             \u001b[0mssc\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m                             \u001b[0;34m[\u001b[0m\u001b[0mREDDIT_TOPIC\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 23\u001b[0;31m                             {\"metadata.broker.list\": KAFKA_BROKERS})\n\u001b[0m\u001b[1;32m     24\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0mstream\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mstream\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mjson\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloads\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/zeppelin/interpreter/spark/pyspark/pyspark.zip/pyspark/streaming/kafka.py\u001b[0m in \u001b[0;36mcreateDirectStream\u001b[0;34m(ssc, topics, kafkaParams, fromOffsets, keyDecoder, valueDecoder, messageHandler)\u001b[0m\n\u001b[1;32m    128\u001b[0m             \u001b[0mfunc\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mfuncWithoutMessageHandler\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    129\u001b[0m             jstream \u003d helper.createDirectStreamWithoutMessageHandler(\n\u001b[0;32m--\u003e 130\u001b[0;31m                 ssc._jssc, kafkaParams, set(topics), jfromOffsets)\n\u001b[0m\u001b[1;32m    131\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    132\u001b[0m             \u001b[0mser\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mAutoBatchedSerializer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mPickleSerializer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/zeppelin/interpreter/spark/pyspark/py4j-0.10.4-src.zip/py4j/java_gateway.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m   1131\u001b[0m         \u001b[0manswer\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgateway_client\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_command\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcommand\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1132\u001b[0m         return_value \u003d get_return_value(\n\u001b[0;32m-\u003e 1133\u001b[0;31m             answer, self.gateway_client, self.target_id, self.name)\n\u001b[0m\u001b[1;32m   1134\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1135\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mtemp_arg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtemp_args\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/zeppelin/interpreter/spark/pyspark/pyspark.zip/pyspark/sql/utils.py\u001b[0m in \u001b[0;36mdeco\u001b[0;34m(*a, **kw)\u001b[0m\n\u001b[1;32m     61\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mdeco\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 63\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mpy4j\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprotocol\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPy4JJavaError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m             \u001b[0ms\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjava_exception\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtoString\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/zeppelin/interpreter/spark/pyspark/py4j-0.10.4-src.zip/py4j/protocol.py\u001b[0m in \u001b[0;36mget_return_value\u001b[0;34m(answer, gateway_client, target_id, name)\u001b[0m\n\u001b[1;32m    317\u001b[0m                 raise Py4JJavaError(\n\u001b[1;32m    318\u001b[0m                     \u001b[0;34m\"An error occurred while calling {0}{1}{2}.\\n\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 319\u001b[0;31m                     format(target_id, \".\", name), value)\n\u001b[0m\u001b[1;32m    320\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    321\u001b[0m                 raise Py4JError(\n\n\u001b[0;31mPy4JJavaError\u001b[0m: An error occurred while calling o210.createDirectStreamWithoutMessageHandler.\n: org.apache.spark.SparkException: org.apache.spark.SparkException: Couldn\u0027t find leaders for Set([my_topic,0])\n\tat org.apache.spark.streaming.kafka.KafkaCluster$$anonfun$checkErrors$1.apply(KafkaCluster.scala:373)\n\tat org.apache.spark.streaming.kafka.KafkaCluster$$anonfun$checkErrors$1.apply(KafkaCluster.scala:373)\n\tat scala.util.Either.fold(Either.scala:98)\n\tat org.apache.spark.streaming.kafka.KafkaCluster$.checkErrors(KafkaCluster.scala:372)\n\tat org.apache.spark.streaming.kafka.KafkaUtils$.getFromOffsets(KafkaUtils.scala:222)\n\tat org.apache.spark.streaming.kafka.KafkaUtilsPythonHelper.createDirectStream(KafkaUtils.scala:720)\n\tat org.apache.spark.streaming.kafka.KafkaUtilsPythonHelper.createDirectStreamWithoutMessageHandler(KafkaUtils.scala:688)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)\n\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357)\n\tat py4j.Gateway.invoke(Gateway.java:280)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.GatewayConnection.run(GatewayConnection.java:214)\n\tat java.lang.Thread.run(Thread.java:748)\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1654084027737_958493892",
      "id": "20220601-114707_1904563432",
      "dateCreated": "2022-06-01 11:47:07.737",
      "dateStarted": "2022-06-02 04:55:50.687",
      "dateFinished": "2022-06-02 04:55:50.884",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%flink.pyflink\r\nfrom pyflink.table.table import Table\r\n\r\ndef as_view(table, name):\r\n  if (name in st_env.list_temporary_views()):\r\n    st_env.drop_temporary_view(name)\r\n  st_env.create_temporary_view(name, table)\r\n  return table\r\n\r\nTable.as_view \u003d as_view",
      "user": "anonymous",
      "dateUpdated": "2022-06-01 11:49:51.760",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "org.apache.zeppelin.interpreter.InterpreterNotFoundException: No such interpreter: flink.pyflink"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1654001780136_-395989587",
      "id": "20220531-125620_1534349402",
      "dateCreated": "2022-05-31 12:56:20.136",
      "status": "ERROR",
      "errorMessage": "org.apache.zeppelin.interpreter.InterpreterNotFoundException: No such interpreter: flink.pyflink\n\tat org.apache.zeppelin.interpreter.InterpreterFactory.getInterpreter(InterpreterFactory.java:79)\n\tat org.apache.zeppelin.notebook.Paragraph.getBindedInterpreter(Paragraph.java:242)\n\tat org.apache.zeppelin.notebook.Paragraph.execute(Paragraph.java:350)\n\tat org.apache.zeppelin.notebook.Note.run(Note.java:683)\n\tat org.apache.zeppelin.socket.NotebookServer.persistAndExecuteSingleParagraph(NotebookServer.java:1881)\n\tat org.apache.zeppelin.socket.NotebookServer.runParagraph(NotebookServer.java:1840)\n\tat org.apache.zeppelin.socket.NotebookServer.onMessage(NotebookServer.java:262)\n\tat org.apache.zeppelin.socket.NotebookSocket.onWebSocketText(NotebookSocket.java:59)\n\tat org.eclipse.jetty.websocket.common.events.JettyListenerEventDriver.onTextMessage(JettyListenerEventDriver.java:189)\n\tat org.eclipse.jetty.websocket.common.message.SimpleTextMessage.messageComplete(SimpleTextMessage.java:69)\n\tat org.eclipse.jetty.websocket.common.events.AbstractEventDriver.appendMessage(AbstractEventDriver.java:66)\n\tat org.eclipse.jetty.websocket.common.events.JettyListenerEventDriver.onTextFrame(JettyListenerEventDriver.java:158)\n\tat org.eclipse.jetty.websocket.common.events.AbstractEventDriver.incomingFrame(AbstractEventDriver.java:162)\n\tat org.eclipse.jetty.websocket.common.WebSocketSession.incomingFrame(WebSocketSession.java:459)\n\tat org.eclipse.jetty.websocket.common.extensions.AbstractExtension.nextIncomingFrame(AbstractExtension.java:182)\n\tat org.eclipse.jetty.websocket.common.extensions.compress.PerMessageDeflateExtension.nextIncomingFrame(PerMessageDeflateExtension.java:105)\n\tat org.eclipse.jetty.websocket.common.extensions.compress.CompressExtension.forwardIncoming(CompressExtension.java:142)\n\tat org.eclipse.jetty.websocket.common.extensions.compress.PerMessageDeflateExtension.incomingFrame(PerMessageDeflateExtension.java:85)\n\tat org.eclipse.jetty.websocket.common.extensions.ExtensionStack.incomingFrame(ExtensionStack.java:220)\n\tat org.eclipse.jetty.websocket.common.Parser.notifyFrame(Parser.java:219)\n\tat org.eclipse.jetty.websocket.common.Parser.parse(Parser.java:244)\n\tat org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.readParse(AbstractWebSocketConnection.java:559)\n\tat org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.onFillable(AbstractWebSocketConnection.java:390)\n\tat org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305)\n\tat org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103)\n\tat org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:118)\n\tat org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:333)\n\tat org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:310)\n\tat org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:168)\n\tat org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:126)\n\tat org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:366)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:765)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:683)\n\tat java.lang.Thread.run(Thread.java:748)\n",
      "progressUpdateIntervalMs": 500
    },
    {
      "user": "anonymous",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1654002016927_1045621190",
      "id": "20220531-130016_1843447252",
      "dateCreated": "2022-05-31 13:00:16.927",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Big Data Kafka Spark Streaming",
  "id": "2EAB941ZD",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "producer:shared_process": [],
    "sh:shared_process": [],
    "consumer:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {}
}